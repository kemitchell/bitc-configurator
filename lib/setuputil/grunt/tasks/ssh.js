// bitc-configurator: management of a small set of Linux computers
// Copyright(c) 2014 Joshua Oldenburg (http://joshuaoldenburg.com)
// Released under the GPLv3 license. See LICENSE.txt for more info

var colors = require('colors');
var exec = require('child_process').exec;
var util = require('util');
var fs = require('fs');
var api = require('../../../api');
var gruntfile = require('../Gruntfile');

/*
* Defines the following tasks:
* - bitc:setup:ssh
* - bitc:setup:ssh:client
* - bitc:setup:ssh:server
* - bitc:setup:ssh:generatekeys
* - bitc:setup:ssh:configure
*/

module.exports = function(grunt) {
	var _conf = api.thisComputer;

	grunt.registerTask('bitc:setup:ssh', [
		_conf.isServer ? 'bitc:setup:ssh:server' : 'bitc:setup:ssh:client',
	]);

	grunt.registerTask('bitc:setup:ssh:server', 'set up SSH for server', function() {
		grunt.file.mkdir('/etc/bitc/ssh');

		var done = this.async();
		if (!keyUtil.keysExist(grunt)) {
			keyUtil.generateKeys(grunt, _setupForServer);
		} else _setupForServer();

		function _setupForServer(cont) {
			if (!cont) done(cont);

			grunt.file.copy('/etc/bitc/ssh/globalKey.pub', '/etc/bitc/ssh/authorized_keys');

			grunt.task.run('bitc:setup:ssh:configure');

			done();
		}
	});

	grunt.registerTask('bitc:setup:ssh:client', 'set up SSH for client', function() {
		grunt.task.run('bitc:setup:ssh:configure');
		grunt.log.writeln('WARNING: TODO: clients must pull authorized_keys!'.yellow);
	});

	grunt.registerTask('bitc:setup:ssh:configure', 'set up SSH - configure daemon', function() {
		if (!fs.renameSync('/etc/ssh/sshd_config', '/etc/bitc/ssh/sshd_config.orig')) {
			grunt.fail.fatal('Could not move original sshd_config');
			return;
		}
		grunt.file.copy(('../files/sshd_config' + (_conf.isServer ? '-server' : '-client')), '/etc/ssh/sshd_config', {
			process: gruntfile.fileContentsProcessor,
		});
		if (!fs.chmodSync('/etc/ssh/sshd_config', 0644)) {
			grunt.fail.fatal('Could not `chmod 0644 /etc/ssh/sshd_config`');
			return;
		}

		grunt.file.copy('../files/ssh_banner', '/etc/bitc/ssh/ssh_banner');

		grunt.task.run('bitc:setup:ssh:restart');
	});
	grunt.registerTask('bitc:setup:ssh:restart', function() {
		var done = this.async();
		exec('service ssh restart', {
			timeout: 30000,
		}, function(error, stdout, stderr) {
			if (error) {
				grunt.fail.warn('Failed to restart SSH daemon to reload configuration. When the setup is complete, please restart the computer.', error.code);
				done();
				return;
			}
			grunt.log.writeln('Successfully configured and restarted SSH daemon.').ok();
			done();
		});
	});
}

var keyUtil = {
	keysExist: function(grunt) {
		return (grunt.file.isFile('/etc/bitc/ssh/globalKey') && grunt.file.isFile('/etc/bitc/ssh/globalKey.pub'));
	},
	keysExist: function(grunt) {
		return (grunt.file.isFile('/etc/bitc/ssh/globalKey') || grunt.file.isFile('/etc/bitc/ssh/globalKey.pub'));
	},
	deleteOldKeys: function(grunt) {
		grunt.log.writeln('Removing old SSH keys...');
		grunt.file.delete('/etc/bitc/ssh/globalKey', {force: true});
		grunt.file.delete('/etc/bitc/ssh/globalKey.pub', {force: true});
	},
	generateKeys: function(grunt, done) {
		if (keyUtil.eitherKeyExists(grunt)) keyUtil.deleteOldKeys(grunt);
		grunt.log.writeln('Generating SSH key...');
		exec('ssh-keygen -q -b 2048 -t rsa -N "" -C "BITC global key" -f /etc/bitc/ssh/globalKey', {
			timeout: 10000,
		}, function(error, stdout, stderr) {
			if (error) {
				_deleteOldKeys(grunt);
				grunt.fail.fatal('Failed to generate SSH key: ssh-keygen exited with code ' + error.code, error.code);
				done(false);
				return;
			}
			if (!_keysExist) {
				_deleteOldKeys(grunt);
				grunt.fail.fatal('SSH key was not successfully generated! This should never happen.');
				done(false);
				return;
			}

			if (!fs.chmodSync('/etc/bitc/ssh/globalKey', 0600) || !fs.chmodSync('/etc/bitc/ssh/globalKey.pub', 0644)) {
				_deleteOldKeys(grunt);
				grunt.fail.fatal('Could not `chmod 0600 /etc/bitc/ssh/globalKey{,.pub}`');
				done(false);
				return;
			}

			grunt.log.writeln('Successfully generated SSH key.').ok();
			done();
		});
	}
};

// Command to generate key: ssh-keygen -q -b 2048 -t rsa -N '' -C 'BITC intranet global key generated by bitc-configurator on <date>' -f <output-path>